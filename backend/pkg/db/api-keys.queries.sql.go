// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: api-keys.queries.sql

package db

import (
	"context"
	"database/sql"
)

const createApiKey = `-- name: CreateApiKey :one
INSERT INTO
  "user_api_keys" (user_id, api_secret, expires_after)
VALUES
  ($1, $2, $3) RETURNING api_key, user_id, api_secret, expires_after, created_at, updated_at
`

type CreateApiKeyParams struct {
	UserID       int32
	ApiSecret    string
	ExpiresAfter sql.NullTime
}

func (q *Queries) CreateApiKey(ctx context.Context, arg CreateApiKeyParams) (UserApiKey, error) {
	row := q.db.QueryRowContext(ctx, createApiKey, arg.UserID, arg.ApiSecret, arg.ExpiresAfter)
	var i UserApiKey
	err := row.Scan(
		&i.ApiKey,
		&i.UserID,
		&i.ApiSecret,
		&i.ExpiresAfter,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteApiKey = `-- name: DeleteApiKey :exec
DELETE FROM
  "user_api_keys"
WHERE
  api_key = $1
`

func (q *Queries) DeleteApiKey(ctx context.Context, apiKey string) error {
	_, err := q.db.ExecContext(ctx, deleteApiKey, apiKey)
	return err
}
