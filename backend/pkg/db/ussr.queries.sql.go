// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: ussr.queries.sql

package db

import (
	"context"
)

const acceptRequest = `-- name: AcceptRequest :one
UPDATE user_sender_reqs
  SET status = 'accepted'
  WHERE id = $1
  RETURNING id, user_id, sender_id, requestor, status, created_at, updated_at
`

func (q *Queries) AcceptRequest(ctx context.Context, id int32) (UserSenderReq, error) {
	row := q.db.QueryRowContext(ctx, acceptRequest, id)
	var i UserSenderReq
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SenderID,
		&i.Requestor,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUSSRRequest = `-- name: CreateUSSRRequest :one
INSERT INTO user_sender_reqs (
  user_id, sender_id, requestor
) VALUES ($1, $2, $3)
RETURNING id, user_id, sender_id, requestor, status, created_at, updated_at
`

type CreateUSSRRequestParams struct {
	UserID    int32
	SenderID  int32
	Requestor UssrRequestor
}

func (q *Queries) CreateUSSRRequest(ctx context.Context, arg CreateUSSRRequestParams) (UserSenderReq, error) {
	row := q.db.QueryRowContext(ctx, createUSSRRequest, arg.UserID, arg.SenderID, arg.Requestor)
	var i UserSenderReq
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SenderID,
		&i.Requestor,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const rejectRequest = `-- name: RejectRequest :one
UPDATE user_sender_reqs
  SET status = 'rejected'
  WHERE id = $1
  RETURNING id, user_id, sender_id, requestor, status, created_at, updated_at
`

func (q *Queries) RejectRequest(ctx context.Context, id int32) (UserSenderReq, error) {
	row := q.db.QueryRowContext(ctx, rejectRequest, id)
	var i UserSenderReq
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SenderID,
		&i.Requestor,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
